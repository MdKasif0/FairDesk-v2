rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated
    function isSignedIn() {
      return request.auth != null;
    }

    // Helper function to get the user's document from Firestore
    function getUserDoc(userId) {
      return get(/databases/$(database)/documents/users/$(userId));
    }
    
    // Helper function to get the incoming (request) user's document
    function getRequestingUserDoc() {
        return getUserDoc(request.auth.uid);
    }
    
    // A user is a member of a group if their user document says so, OR if the group's member list includes them.
    // This provides flexibility for different types of checks.
    function isMemberOfGroup(groupId) {
      let userHasGroupId = isSignedIn() && getRequestingUserDoc().data.groupId == groupId;
      let groupHasUser = isSignedIn() && get(/databases/$(database)/documents/groups/$(groupId)).data.members.hasAny([request.auth.uid]);
      return userHasGroupId || groupHasUser;
    }
    
    // Helper function to check if a user can join a group
    function canJoinGroup(groupResource) {
        let isAddingSelf = request.resource.data.members.hasAny([request.auth.uid]);
        let wasNotMember = !groupResource.data.members.hasAny([request.auth.uid]);
        let groupNotLocked = groupResource.data.isLocked == false;

        return isAddingSelf && wasNotMember && groupNotLocked;
    }
    
    // Rule for the 'users' collection
    match /users/{userId} {
      // Users can read and update their own document.
      allow read, update: if isSignedIn() && request.auth.uid == userId;
      // Any signed-in user can create their own user document (on signup).
      allow create: if isSignedIn() && request.auth.uid == userId;
      // Allow users to list all members of their own group.
      allow list: if isSignedIn() && isMemberOfGroup(getRequestingUserDoc().data.groupId);
    }
    
    // Rule for the 'groups' collection
    match /groups/{groupId} {
      // A user can create a group if they are the creator listed in the new document.
      allow create: if isSignedIn() && request.resource.data.creatorId == request.auth.uid;
      // Any member of a group can read it.
      allow read: if isMemberOfGroup(groupId);
      // A user can update a group if they are already a member, OR if they are joining the group.
      allow update: if isMemberOfGroup(groupId) || canJoinGroup(resource);
    }

    // Rules for group-specific sub-collections
    match /seats/{seatId} {
        allow read, write: if isMemberOfGroup(request.resource.data.groupId);
    }

    match /assignments/{assignmentId} {
        allow read, write: if isMemberOfGroup(request.resource.data.groupId);
    }
    
    match /changeRequests/{requestId} {
        allow read, write: if isMemberOfGroup(request.resource.data.groupId);
    }
  }
}
